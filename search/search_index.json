{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Warning</p> <p>This is nowhere near completion yet! I'm pushing this as a test.</p> <p>This guide is my personal take on an all-purpose guide that's geared towards making newcomers understand the mechanics of Brickadia in a more simplified manner.</p> <p>This guide does not cover the highly technical aspects of the game, like setting up a server or installing the game. Please refer to other communities for technical advice.</p> <p>This is a part-time project I'm investing in. I am not obligated to instantly update the guide after seconds of new updates coming out. Be mindful of your requests.</p> <p>Feedback can be given on the Github repository.</p>"},{"location":"FAQ/general.html","title":"General","text":"<p>Common answers to common questions about the general aspect of the game.</p> <p>Please use the menu/sidebar to browse FAQs about wires or any other non-general aspects of the game.</p>"},{"location":"FAQ/general.html#storefronts","title":"Storefronts","text":"<p>Brickadia is currently exclusive to the Steam storefront with the price of $30 and is Early Access at the time of writing.</p> <p></p> <p>An in-game account is required, but you will be able to create one in-game. There are no restrictions, DRM or encryptions that come along with the game. This game can be played offline in offline mode.</p>"},{"location":"FAQ/general.html#platforms","title":"Platforms","text":"<p>Brickadia is currently available on these platforms:</p> <ul> <li> Windows - Windows 10 or higher. Windows 11 is recommended.</li> <li> Linux - ran through Proton, as the developers have stated it ran better than the native Linux build</li> </ul>"},{"location":"FAQ/general.html#performance","title":"Performance","text":"<p>Brickadia runs on Unreal Engine 5.</p> <p>A gaming-class card with 4GB of video memory or more, 12GB system memory or more and a adequate modern processor of 6 or more cores is recommended. Modern systems will support and take advantage of DirectX 12 with no issue. For older systems, I recommend DirectX 11 for better performance on those systems. For systems with inadequate CPU or GPU, the Simple Graphics option serves as a fallback option in case of catastrophic performance. You wouldn't explode a potato.</p> <p>An aspect ratio of 16:9 is ideal as the UI is built for wide-screen and will down-size if you choose something like 4:3. Brickadia also supports capping at framerates higher than 60 for those with displays of higher refresh rate. It also has an unfocused framerate cap, which will help save on GPU resources if you are working on something else while Brickadia is open in the background.</p> <p>You can expect varying levels of performance due to the natural variance of servers and worlds, meaning there is no central benchmark. Some worlds or servers will be heavy on performance, and some may be light enough to be able to run on integrated graphics without going under tolerable framerates.</p>"},{"location":"FAQ/general.html#social","title":"Social","text":"<p>You can follow or interact the official Brickadia social media accounts here:</p> <ul> <li>TikTok</li> <li>Youtube</li> <li>Twitter ...or X but I will give you a side eye</li> <li>Instagram</li> <li>Bluesky</li> <li>Reddit</li> </ul>"},{"location":"FAQ/general.html#forums","title":"Forums","text":"<p>We have a Discord, but no forum yet. Any other forum is unofficial and not affiliated with the official team working with the game.</p> <p>In the Discord, you can ask questions about the game and showcase your projects.</p>"},{"location":"Wires/Gates/Buffers.html","title":"Buffer","text":""},{"location":"Wires/Gates/Conditional.html","title":"Conditional","text":""},{"location":"Wires/Gates/Logic.html","title":"Logic Gates","text":""},{"location":"Wires/Gates/Logic.html#not","title":"NOT","text":"<p>Depending on the following inputs:</p>  False True <p>If the input is False:</p> <p></p> <p>The gate will output True.</p> <p>If the input is True:</p> <p></p> <p>The gate will output False.</p>"},{"location":"Wires/Gates/Logic.html#and","title":"AND","text":"<p>Depending on the following inputs:</p>  False / False True / False True / True <p>If both inputs are False:</p> <p></p> <p>The gate will output False.</p> <p>If one input is True and another is False:</p> <p></p> <p>The gate will output False.</p> <p>If both inputs are True:</p> <p></p> <p>The gate will output True.</p>"},{"location":"Wires/Gates/Logic.html#or","title":"OR","text":"<p>Depending on the following inputs:</p>  False / False True / False True / True <p>If both inputs are False:</p> <p></p> <p>The gate will output False.</p> <p>If one input is True and another is False:</p> <p></p> <p>The gate will output True.</p> <p>If both inputs are True:</p> <p></p> <p>The gate will output True.</p>"},{"location":"Wires/Gates/Logic.html#xor","title":"XOR","text":"<p>Depending on the following inputs:</p>  False / False True / False True / True <p>If both inputs are False:</p> <p></p> <p>The gate will output False.</p> <p>If one input is True and another is False:</p> <p></p> <p>The gate will output True.</p> <p>If both inputs are True:</p> <p></p> <p>The gate will output False.</p>"},{"location":"Wires/Gates/Logic.html#nand","title":"NAND","text":"<p>Depending on the following inputs:</p>  False / False True / False True / True <p>If both inputs are False:</p> <p></p> <p>The gate will output True.</p> <p>If one input is True and another is False:</p> <p></p> <p>The gate will output True.</p> <p>If both inputs are True:</p> <p></p> <p>The gate will output False.</p>"},{"location":"Wires/Gates/Logic.html#nor","title":"NOR","text":"<p>Depending on the following inputs:</p>  False / False True / False True / True <p>If both inputs are False:</p> <p></p> <p>The gate will output True.</p> <p>If one input is True and another is False:</p> <p></p> <p>The gate will output False.</p> <p>If both inputs are True:</p> <p></p> <p>The gate will output False.</p>"},{"location":"Wires/Gates/Logic.html#edge-detector","title":"Edge Detector","text":"<p>This gate sends a one-tick pulse of True whenever one of these two conditions are met:</p>  Value Increase Value Decrease <p>Outputs to the Rising Edge port when the input value increases.</p> <p></p> <p>Outputs to the Falling Edge port when the input value decreases.</p> <p></p> <p>Otherwise, this will do nothing if the input value stays static.</p> <p>Best used with the input of a  Boolean value.</p>"},{"location":"Wires/Gates/Math.html","title":"Math Gates","text":"<p>These gates are based on real-world mathematics. You will need ample knowledge to use these gates itself, so it is recommended you recap or read on real-world mathematics fundamentals.</p>"},{"location":"Wires/Gates/Math.html#add","title":"Add","text":"<p>This gate outputs the sum of both inputs (\\(\\text{Input A} + \\text{Input B} = \\text{Output}\\)).</p> <p></p> <p>This gate will add or subtract based on Input B.</p> <ul> <li>If Input B is positive, the gate will do addition as normal.  \\(A + B = \\text{Output}\\)</li> <li>If Input B is negative, the gate will do subtraction instead.  \\((A + -B) \\rightarrow (A - B) = \\text{Output}\\)</li> </ul> <p>These rules do not apply to Input A. Input A can either be positive or negative without any effect to the functionality.</p>"},{"location":"Wires/Gates/Math.html#subtract","title":"Subtract","text":"<p>This gate outputs the product of subtracting Input A with Input B (\\(\\text{Input A} - \\text{Input B} = \\text{Output}\\)).</p> <p></p> <p>This gate will subtract or add based on Input B.</p> <ul> <li>If Input B is positive, the gate will do subtraction as normal.  \\(A - B = \\text{Output}\\)</li> <li>If Input B is negative, the gate will do addition instead.  \\((A - -B) \\rightarrow (A + B) = \\text{Output}\\)</li> </ul> <p>These rules do not apply to Input A. Input A can either be positive or negative without any effect to the functionality.</p>"},{"location":"Wires/Gates/Math.html#multiply","title":"Multiply","text":"<p>This gate outputs the product of multiplying both inputs (\\(\\text{Input A} \\times \\text{Input B} = \\text{Output}\\)).</p> <p></p> <ul> <li>If the inputs are both positive or negative, the output always comes out as positive.</li> <li>If either individual input has a negative value and the other has a positive value, the output always comes out as negative.</li> </ul>"},{"location":"Wires/Gates/Math.html#using-multiply-for-division","title":"Using Multiply for division","text":"<p>You can insert float values containing decimals to multiply with other values, which may prove useful in scenarios where using Multiply gates over Divide gates are preferred.</p> <p></p>"},{"location":"Wires/Gates/Math.html#using-multiply-for-exponents","title":"Using Multiply for exponents","text":"<p>For the power of 2, you need to connect the same wire containing the value to both inputs of the Multiply gate.</p> <p>Shown in this example is \\(4^2\\), alternatively read as 4 to the power of 2.</p> <p></p> <p>You will need to chain 2 Multiply gates or more to handle operations involving exponents that are above 2.</p> <p>This example achieves \\(8^2\\), \\(8^3\\) and \\(8^4\\), all in one circuit.</p> <p></p>"},{"location":"Wires/Gates/Math.html#divide","title":"Divide","text":"<p>This gate outputs the product of dividing both inputs (\\(\\text{Input A} \\div \\text{Input B} = \\text{Output}\\)). Division can also be represented by using fractions.</p> <p></p> <ul> <li>If the inputs are both positive or negative, the output always comes out as positive.</li> <li>If either individual input has a negative value and the other has a positive value, the output always comes out as negative.</li> </ul>"},{"location":"Wires/Gates/Math.html#using-divide-for-multiplication","title":"Using Divide for multiplication","text":"<p>You can insert float values containing decimals to divide with other values, which may prove useful in scenarios where using Divide gates over Multiply gates are preferred.</p> <p></p>"},{"location":"Wires/Gates/Math.html#blend","title":"Blend","text":"<p>To simplify this down with a brief explanation: this gate is commonly used to:</p> <ul> <li>Select a set of numbers based on an  Float value.</li> <li>Output two numbers depending on a  Boolean value.</li> </ul> <p>This gate is based on linear interpolation (alternatively called a Lerp in computer terms).</p>"},{"location":"Wires/Gates/Math.html#formula","title":"Formula","text":"<p>We will show the linear interpolation formula:</p> \\[y = y_{0} + (x-x_{0})\\frac{y_{1}-y_{0}}{x_{1}-x_{0}}\\] <p>This gate uses the same formula, but swaps out the variables for the inputs' values:</p> \\[\\text{Output} = \\text{Input A} + (\\text{Blend Value}-0)\\frac{\\text{Input B}-{\\text{Input A}}}{1-0}\\] <p>To cut down on redundancy, we will simplify the formula down to this:</p> \\[\\text{Output} = \\text{A} + (\\text{Blend Value})(\\text{B}-{\\text{A}})\\]"},{"location":"Wires/Gates/Math.html#examples","title":"Examples","text":"Boolean value as blend valueFloat value as blend value <p>A Boolean value can only either be 0 (false) or 1 (true), which makes it a perfect candidate if you just want to use the Blend gate to make a switch output between two custom values.</p> <p>Given Input A is 10 and Input B is 20:</p> <ul> <li>If Blend Value is False, the Blend gate outputs 10. </li> <li>If Blend Value is True, the Blend gate outputs 20. </li> </ul> <p>Since this warrants the use of the equation above, we will use it to demonstrate how the Blend Gate outputs a value.</p> <p></p> <p>Given input A is 50 and input B is 80, and the blend value is 0.37:</p> <p>First, we subtract 80 (\\(\\text{B}\\)) by 50 (\\(\\text{A}\\)). 30 is the result.</p> \\[\\text{Output} = 50 + (0.37)(80-50)\\] <p>Multiply the blend value with the result of \\((\\text{B}-\\text{A})\\). The result is 11.1.</p> \\[\\text{Output} = 50 + (0.37)(30)\\] <p>Finally, get the sum of Input A and the result of \\((\\text{Blend Value})(\\text{B}-\\text{A})\\).</p> \\[\\text{Output} = 50 + 11.1\\] <p>You have the gate's final output.</p> \\[\\text{Output} = 61.1\\] <p></p>"},{"location":"Wires/Gates/Math.html#ceil","title":"Ceil","text":"<p>This gate rounds an float value up to the higher integer equivalent.</p> <p>Two examples of Ceil:</p> <ul> <li>If the input is 5.06, it is rounded up to the integer of 6. </li> <li>If the input is 8.83, it is rounded up to the integer of 9. </li> </ul>"},{"location":"Wires/Gates/Math.html#floor","title":"Floor","text":"<p>This gate rounds an float value down to the lower integer equivalent.</p> <p>Two examples of Floor:</p> <ul> <li>If the input is 2.46, it is rounded down to the integer of 2. </li> <li>If the input is 3.71, it is rounded down to the integer of 3. </li> </ul>"},{"location":"Wires/Gates/Math.html#modulo","title":"Modulo","text":"<p>This gate extracts the remainder of a division equation.</p> <p>If your numbers are evenly subtractable, this gate will output zero. For example:</p> <ul> <li>\\(12 \\div 4 = 3\\), leaving no remainder. </li> <li>\\(600 \\div 10 = 60\\) leaving no remainder. </li> </ul> <p>On the other hand, here's some examples of division that output non-zero values with Modulo:</p> <ul> <li>\\(24 \\div 7 = 4\\) with a remainder of \\(3\\). </li> <li>\\(95 \\div 15 = 6\\) with a remainder of \\(5\\). </li> </ul>"},{"location":"Wires/Gates/Math.html#modulo-floor","title":"Modulo (Floor)","text":"<p>Does the same as the Modulo gate but rounds the value down to an equivalent lower integer.</p> <ul> <li>\\(17.6 \\div 5 = 3\\) with a remainder of \\(2.6\\), floored down to \\(2\\). </li> </ul>"},{"location":"Wires/Gates/Variables.html","title":"Variables","text":""}]}